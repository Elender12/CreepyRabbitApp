openapi: 3.0.1
info:
  contact:
    email: elender1230@gmail.com
    name: Elena Cirstea
  description: Microservice to perform CRUD operations with an user
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: User API
  version: 1.0.0
servers:
- url: //10.0.2.2:9100/
tags:
- description: Home Controller
  name: home-controller
- description: User Api Controller
  name: user-api-controller
paths:
  /:
    get:
      deprecated: false
      operationId: indexUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - JWT:
        - global
      summary: index
      tags:
      - home-controller
      x-accepts: '*/*'
  /authenticate:
    post:
      deprecated: false
      description: ' .'
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRequest'
        description: JwtRequest object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
          description: OK.
        "201":
          content: {}
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Invalid User.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Unauthorized.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Server error.
      security:
      - JWT:
        - global
      summary: Authenticate a user by username and password
      tags:
      - JwtResponse
      x-codegen-request-body-name: authenticationRequest
      x-contentType: application/json
      x-accepts: application/json
  /config:
    get:
      deprecated: false
      operationId: configUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - JWT:
        - global
      summary: config
      tags:
      - home-controller
      x-accepts: '*/*'
  /healthcheck:
    get:
      deprecated: false
      operationId: healthcheckUsingGET
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - JWT:
        - global
      summary: healthcheck
      tags:
      - home-controller
      x-accepts: '*/*'
  /users:
    get:
      deprecated: false
      description: Returns all Users.
      operationId: getAllUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Unauthorized.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Server error.
      security:
      - JWT:
        - global
      summary: Get all users.
      tags:
      - Users
      x-accepts: application/json
    post:
      deprecated: false
      description: "Takes a User object, saves it, and returns it with the saved id."
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK.
        "201":
          content: {}
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Invalid User.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Unauthorized.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Server error.
      security:
      - JWT:
        - global
      summary: Add a new user.
      tags:
      - Users
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
    put:
      deprecated: false
      description: "Takes an existing User, updates it, and returns the new object."
      operationId: updateUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK.
        "201":
          content: {}
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Invalid User.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Unauthorized.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Server error.
      security:
      - JWT:
        - global
      summary: Update an existing user.
      tags:
      - Users
      x-codegen-request-body-name: body
      x-contentType: application/json
      x-accepts: application/json
  /users/{id}:
    delete:
      deprecated: false
      description: "Takes an existing User, deletes it, and returns the new object."
      operationId: deleteUsers
      parameters:
      - description: User object to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK.
        "204":
          content: {}
          description: No Content
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Unauthorized.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Server error.
      security:
      - JWT:
        - global
      summary: Delete an existing User by id.
      tags:
      - Users
      x-accepts: application/json
    get:
      deprecated: false
      description: Returns one User by id.
      operationId: getUsersByID
      parameters:
      - description: Returns a user by Id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Unauthorized.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionResponse'
          description: Server error.
      security:
      - JWT:
        - global
      summary: Get a user by id.
      tags:
      - Users
      x-accepts: application/json
components:
  schemas:
    ExceptionResponse:
      properties:
        timestamp:
          format: int64
          type: integer
        status:
          format: int32
          type: integer
        message:
          type: string
      title: ExceptionResponse
      type: object
    JwtRequest:
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      title: JwtRequest
      type: object
    JwtResponse:
      example:
        token: token
      properties:
        token:
          type: string
      title: JwtResponse
      type: object
    User:
      example:
        password: password
        created: 2021-02-25T15:46:13.824Z
        name: name
        modified: 2021-02-25T15:46:13.824Z
        disabled: false
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: email
        username: username
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        disabled:
          description: Indicates if this master data has been disabled.
          example: false
          type: boolean
        modified:
          description: Field provided by server.
          example: 2021-02-25T15:46:13.824Z
          format: date-time
          type: string
        created:
          description: Field provided by server.
          example: 2021-02-25T15:46:13.824Z
          format: date-time
          type: string
      title: User
      type: object
  securitySchemes:
    JWT:
      in: header
      name: Authorization
      type: apiKey

