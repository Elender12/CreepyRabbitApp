  openapi: 3.0.1
  info:
    title: User API
    description: Microservice to perform CRUD operations with an user
    contact:
      name: Elena Cirstea
      email: elender1230@gmail.com
    license:
      name: Apache 2.0
      url: http://www.apache.org/licenses/LICENSE-2.0.html
    version: 1.0.0
  servers:
    - url: //10.0.2.2:9100/
  tags:
    - name: home-controller
      description: Home Controller
    - name: user-api-controller
      description: User Api Controller
  paths:
    /:
      get:
        tags:
          - home-controller
        summary: index
        operationId: indexUsingGET
        responses:
          200:
            description: OK
            content:
              '*/*':
                schema:
                  type: string
          401:
            description: Unauthorized
            content: {}
          403:
            description: Forbidden
            content: {}
          404:
            description: Not Found
            content: {}
        deprecated: false
        security:
          - JWT:
              - global
    /authenticate:
      post:
        tags:
          - JwtResponse
        summary: Authenticate a user by username and password
        description: ' .'
        operationId: authenticate
        requestBody:
          description: JwtRequest object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtRequest'
          required: true
        responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JwtResponse'
          201:
            description: Created
            content: {}
          400:
            description: Invalid User.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          401:
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          403:
            description: Forbidden.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          404:
            description: Not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          500:
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
        deprecated: false
        security:
          - JWT:
              - global
        x-codegen-request-body-name: authenticationRequest
    /config:
      get:
        tags:
          - home-controller
        summary: config
        operationId: configUsingGET
        responses:
          200:
            description: OK
            content:
              '*/*':
                schema:
                  type: object
                  additionalProperties:
                    type: string
          401:
            description: Unauthorized
            content: {}
          403:
            description: Forbidden
            content: {}
          404:
            description: Not Found
            content: {}
        deprecated: false
        security:
          - JWT:
              - global
    /healthcheck:
      get:
        tags:
          - home-controller
        summary: healthcheck
        operationId: healthcheckUsingGET
        responses:
          200:
            description: OK
            content:
              '*/*':
                schema:
                  type: string
          401:
            description: Unauthorized
            content: {}
          403:
            description: Forbidden
            content: {}
          404:
            description: Not Found
            content: {}
        deprecated: false
        security:
          - JWT:
              - global
    /users:
      get:
        tags:
          - Users
        summary: Get all users.
        description: Returns all Users.
        operationId: getAllUsers
        responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          401:
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          403:
            description: Forbidden.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          404:
            description: Not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          500:
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
        deprecated: false
        security:
          - JWT:
              - global
      put:
        tags:
          - Users
        summary: Update an existing user.
        description: Takes an existing User, updates it, and returns the new object.
        operationId: updateUsers
        requestBody:
          description: User object to update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          201:
            description: Created
            content: {}
          400:
            description: Invalid User.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          401:
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          403:
            description: Forbidden.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          404:
            description: Not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          500:
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
        deprecated: false
        security:
          - JWT:
              - global
        x-codegen-request-body-name: body
      post:
        tags:
          - Users
        summary: Add a new user.
        description: Takes a User object, saves it, and returns it with the saved id.
        operationId: addUser
        requestBody:
          description: User object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          201:
            description: Created
            content: {}
          400:
            description: Invalid User.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          401:
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          403:
            description: Forbidden.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          404:
            description: Not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          500:
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
        deprecated: false
        security:
          - JWT:
              - global
        x-codegen-request-body-name: body
    /users/{id}:
      get:
        tags:
          - Users
        summary: Get a user by id.
        description: Returns one User by id.
        operationId: getUsersByID
        parameters:
          - name: id
            in: path
            description: Returns a user by Id
            required: true
            schema:
              type: string
              format: uuid
        responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          401:
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          403:
            description: Forbidden.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          404:
            description: Not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          500:
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
        deprecated: false
        security:
          - JWT:
              - global
      delete:
        tags:
          - Users
        summary: Delete an existing User by id.
        description: Takes an existing User, deletes it, and returns the new object.
        operationId: deleteUsers
        parameters:
          - name: id
            in: path
            description: User object to update.
            required: true
            schema:
              type: string
              format: uuid
        responses:
          200:
            description: OK.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          204:
            description: No Content
            content: {}
          401:
            description: Unauthorized.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          403:
            description: Forbidden.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          404:
            description: Not found.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
          500:
            description: Server error.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ExceptionResponse'
        deprecated: false
        security:
          - JWT:
              - global
  components:
    schemas:
      ExceptionResponse:
        title: ExceptionResponse
        type: object
        properties:
          timestamp:
            type: integer
            format: int64
          status:
            type: integer
            format: int32
          message:
            type: string
      JwtRequest:
        title: JwtRequest
        type: object
        properties:
          username:
            type: string
          password:
            type: string
      JwtResponse:
        title: JwtResponse
        type: object
        properties:
          token:
            type: string
      User:
        title: User
        type: object
        properties:
          id:
            type: string
            format: uuid
          name:
            type: string
          username:
            type: string
          password:
            type: string
          email:
            type: string
          disabled:
            type: boolean
            description: Indicates if this master data has been disabled.
            example: false
          modified:
            type: string
            description: Field provided by server.
            format: date-time
            example: 2021-02-25T15:46:13.824Z
          created:
            type: string
            description: Field provided by server.
            format: date-time
            example: 2021-02-25T15:46:13.824Z
    securitySchemes:
      JWT:
        type: apiKey
        name: Authorization
        in: header
